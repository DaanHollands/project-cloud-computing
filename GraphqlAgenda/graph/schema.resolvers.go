package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	dbModels "agenda/Models"
	"agenda/graph/model"
	"context"
	"fmt"
)

// CreateAgendaEvent is the resolver for the createAgendaEvent field.
func (r *mutationResolver) CreateAgendaEvent(ctx context.Context, userID int, title string, description *string, year int, month int, day int, hour *int, minute *int) (*model.AgendaEvent, error) {
	agendaEvent := &dbModels.AgendaEvent{
		UserID:      uint(userID),
		Title:       title,
		Description: *description,
		Year:        uint(year),
		Month:       uint(month),
		Day:         uint(day),
		Hour: func(h *int) *uint {
			if h == nil {
				return nil
			}
			uh := uint(*h)
			return &uh
		}(hour),
		Minute: func(m *int) *uint {
			if m == nil {
				return nil
			}
			um := uint(*m)
			return &um
		}(minute),
	}

	if err := r.DB.Create(agendaEvent).Error; err != nil {
		return nil, fmt.Errorf("failed to create AgendaEvent: %v", err)
	}

	agendaEventModel := dbModels.GormToGraphqlModel(agendaEvent)
	return &agendaEventModel, nil
}

// UpdateAgendaEvent is the resolver for the updateAgendaEvent field.
func (r *mutationResolver) UpdateAgendaEvent(ctx context.Context, id int, title *string, description *string, year *int, month *int, day *int, hour *int, minute *int) (*model.AgendaEvent, error) {
	var agendaEvent dbModels.AgendaEvent
	if err := r.DB.First(&agendaEvent, id).Error; err != nil {
		return nil, fmt.Errorf("invalid event: ID not found")
	}
	updates := map[string]interface{}{}
	if title != nil {
		updates["title"] = *title
	}
	if description != nil {
		updates["description"] = *description
	}
	if year != nil {
		updates["year"] = *year
	}
	if month != nil {
		updates["month"] = *month
	}
	if day != nil {
		updates["day"] = *day
	}
	if hour != nil {
		updates["hour"] = *hour
	}
	if minute != nil {
		updates["minute"] = *minute
	}

	if err := r.DB.Model(&agendaEvent).Updates(updates).Error; err != nil {
		return nil, fmt.Errorf("failed to update: %v", err)
	}

	agendaEventModel := dbModels.GormToGraphqlModel(&agendaEvent)
	return &agendaEventModel, nil
}

// DeleteAgendaEvent is the resolver for the deleteAgendaEvent field.
func (r *mutationResolver) DeleteAgendaEvent(ctx context.Context, id string) (bool, error) {
	var agendaEvent dbModels.AgendaEvent
	if err := r.DB.First(&agendaEvent, id).Error; err != nil {
		return false, fmt.Errorf("invalid event: ID not found")
	}

	if err := r.DB.Delete(&agendaEvent).Error; err != nil {
		return false, fmt.Errorf("failed to delete: %v", err)
	}

	return true, nil
}

// GetAgenda is the resolver for the getAgenda field.
func (r *queryResolver) GetAgenda(ctx context.Context, id string) (*model.AgendaEvent, error) {
	var agendaEvent dbModels.AgendaEvent
	if err := r.DB.First(&agendaEvent, id).Error; err != nil {
		return nil, fmt.Errorf("invalid event: ID not found")
	}

	agendaEventModel := dbModels.GormToGraphqlModel(&agendaEvent)
	return &agendaEventModel, nil
}

// ListAgendas is the resolver for the listAgendas field.
func (r *queryResolver) ListAgendas(ctx context.Context, userID int) ([]*model.AgendaEvent, error) {
	var agendaEvents []dbModels.AgendaEvent
	if err := r.DB.Where("user_id = ?", userID).Find(&agendaEvents).Error; err != nil {
		return nil, fmt.Errorf("failed to find events: %v", err)
	}

	var result []*model.AgendaEvent
	for _, event := range agendaEvents {
		eventModel := dbModels.GormToGraphqlModel(&event)
		result = append(result, &eventModel)
	}
	return result, nil
}

// GetAgendasByUserDateTime is the resolver for the getAgendasByUserDateTime field.
func (r *queryResolver) GetAgendasByUserDateTime(ctx context.Context, userID int, year *int, month *int, day *int, hour *int, minute *int) ([]*model.AgendaEvent, error) {
	query := r.DB.Where("user_id = ?", userID)
	if year != nil {
		query = query.Where("year = ?", *year)
	}
	if month != nil {
		query = query.Where("month = ?", *month)
	}
	if day != nil {
		query = query.Where("day = ?", *day)
	}
	if hour != nil {
		query = query.Where("hour = ?", *hour)
	}
	if minute != nil {
		query = query.Where("minute = ?", *minute)
	}

	var agendaEvents []dbModels.AgendaEvent
	if err := query.Find(&agendaEvents).Error; err != nil {
		return nil, fmt.Errorf("failed to find events: %v", err)
	}

	var result []*model.AgendaEvent
	for _, event := range agendaEvents {
		eventModel := dbModels.GormToGraphqlModel(&event)
		result = append(result, &eventModel)
	}
	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
