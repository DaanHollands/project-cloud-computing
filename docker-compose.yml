version: "3.8"

services:
  laravel:
    container_name: laravel
    build: 
      context: ./laravelWebsite
      dockerfile: ./Dockerfile
    image: localhost/laravelwebsite:latest
    ports:
      - "8000:8000" # php artisan serve
      - "5173:5173" # npm run dev
    volumes:
      - ./laravelWebsite/:/app:Z # For Development
    networks:
      - app-network
    depends_on:
      dotnet:
        condition: service_started
      graphql:
        condition: service_started
      mqttsensors:
        condition: service_started
      restaurant:
        condition: service_started
      medicaldata:
        condition: service_started

  dotnet:
    container_name: soap_dotnet
    build:
      context: ./SoapDotnet
      dockerfile: ./Dockerfile
    image: localhost/soapdotnet:latest
    ports:
      - "8001:5109"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
        restart: true

  graphql:
    container_name: graphql_go
    build:
      context: ./GraphqlAgenda
      dockerfile: ./Dockerfile
    image: localhost/graphqlgo:latest
    ports:
      - "8002:8060"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
        restart: true

  mqttsensors:
    container_name: mqtt_sensors
    build:
      context: ./MqttSensors
      dockerfile: ./Dockerfile
    image: localhost/mqttsensors:latest
    networks:
      - app-network
    depends_on:
      mqttbroker:
        condition: service_started
        restart: true
  
  mqttbroker:
    container_name: mqtt_broker
    image: docker.io/eclipse-mosquitto:latest
    volumes:
      - "./MqttBroker/config:/mosquitto/config:Z"
      - "./MqttBroker/data:/mosquitto/data:Z"
      - "./MqttBroker/log:/mosquitto/log:Z"
      - "./MqttBroker/create_user.sh:/mosquitto/create_user.sh:Z"
    ports:
      - "8003:1883"
    networks:
      - app-network
    entrypoint: ["/bin/sh", "/mosquitto/create_user.sh"]

  restaurant:
    container_name: rest_restaurant
    build:
      context: ./RestRestaurant/restaurantapi
      dockerfile: ./Dockerfile
    image: localhost/restrestaurant:latest
    networks:
      - app-network
    ports:
      - "8004:8080"
    depends_on:
      postgres:
        condition: service_healthy
        restart: true

  medicaldata:
    container_name: grpc_medical_data
    build:
      context: ./GrpcMedData
      dockerfile: ./Dockerfile
    environment:
        - PYTHONUNBUFFERED=1
    image: localhost/grpcmedicaldata:latest
    networks:
      - app-network
    ports:
      - "8005:50051"
    depends_on:
      postgres:
        condition: service_healthy
        restart: true

  postgres:
      container_name: postgres
      build:
        context: ./postgresDatabase
        dockerfile: ./Dockerfile
      image: localhost/postgresdb:latest
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: user_profile_database
        POSTGRES_MULTIPLE_DB: user_profile_database,laravel_user_database,graphql_agenda_database,rest_restaurant_database,grpc_meddata_database
      ports:
        - "5432:5432"
      volumes:
        - postgres_data:/var/lib/postgresql/data:Z # Persistent Data Storage
      networks:
      - app-network
      healthcheck:
        test: ["CMD-SHELL", "test -f /tmp/postgres_initialized"]
        interval: 10s
        retries: 10
        start_period: 180s
        timeout: 10s

  adminer:
    container_name: adminer
    image: docker.io/adminer:latest
    restart: always
    ports:
      - "8080:8080"
    networks:
      - app-network

volumes:
    postgres_data:

networks:
    app-network:
      driver: bridge
